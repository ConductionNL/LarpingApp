name: Release Workflow

on: 
  push: 
    branches:
      - main
  workflow_dispatch:

jobs:
  release-management:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}   # Checkout the correct branch name
          fetch-depth: 0                # Fetch the whole repo history

      # Step 2: Install PHP extensions
      - name: Set up PHP and install extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: zip, gd

      # Step 3: Install Node.js dependencies using npm
      - name: Install npm dependencies
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      # Step 4: Build the node_modules
      - run: npm install

      # Step 5: Webpack the whole thing
      - run: npm run build

      # Step 6: Install PHP dependencies using Composer
      - name: Install Composer dependencies
        run: composer install --no-progress --no-interaction --prefer-dist --ignore-platform-req=ext-zip --ignore-platform-req=ext-gd
        env:
          COMPOSER_ROOT_VERSION: 2.7.7

      # Step 7: Generate Git version information
      - name: Git Version
        id: version
        uses: codacy/git-version@2.7.1
        with:
          release-branch: main

      # Step 8: Ensure CHANGELOG.md exists
      - name: Check for CHANGELOG.md
        run: |
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "CHANGELOG.md created as it did not exist." >> CHANGELOG.md
          fi
        # This step ensures that a CHANGELOG.md exists or creates one if missing.

      # Step 9: Extract repository description
      - name: Extract repository description
        id: repo-description
        run: |
          description=$(jq -r '.description' <(curl -s https://api.github.com/repos/${{ github.repository }}))
          echo "REPO_DESCRIPTION=$description" >> $GITHUB_ENV

      # Step 10: Run Changelog CI
      - name: Run Changelog CI
        if: github.ref == 'refs/heads/master'
        uses: saadmk11/changelog-ci@v1.1.2
        with:
          release_version: ${{ steps.version.outputs.version }}
          config_file: changelog-ci-config.json

      # Step 11: Output the version
      - name: Use the version
        run: |
          echo ${{ steps.version.outputs.version }}

      # Step 12: Copy the package files into the package
      - name: Copy the package files
        run: |
          mkdir -p package/larpingapp
          cp -r README.md CHANGELOG.md LICENSE.md psalm.xml package.json package-lock.json openapi.json composer.json composer.lock appinfo css img js lib node_modules src templates vendor package/larpingapp/

      # Step 13: Create the ZIP archive
      - name: Create ZIP
        run: |
          cd package && zip -r ../larpingapp.zip larpingapp

      # Step 14: Create the TAR.GZ archive
      - name: Create Tarball
        run: |
          cd package && tar -czf ../larpingapp.tar.gz larpingapp    

      # Step 15: Clean up package directory and add dev files
      - name: Clean up and add dev files
        run: |
          cd package && rm -rf vendor js node_modules 
          cd ../ && cp -r docs tests .babelrc package/larpingapp/     

      # Step 16: Create the source code ZIP archive
      - name: Create Source Code ZIP
        run: |
          cd package && zip -r ../sourcecode.zip larpingapp

      # Step 17: Create the source code TAR.GZ archive
      - name: Create Source Code Tarball
        run: |
          cd package && tar -czf ../sourcecode.tar.gz larpingapp    
                
      # Step 18: Clean up package directory
      - name: Clean up package directory
        run: |
          rm -rf package

      # Step 19: Upload Release
      - name: Upload Release
        uses: ncipollo/release-action@v1.12.0
        with:
          artifacts: |
            LICENSE.md
            larpingapp.zip
            larpingapp.tar.gz
            sourcecode.zip
            sourcecode.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.version.outputs.version }}
